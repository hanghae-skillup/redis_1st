plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':domain')
    implementation project(':common')
    
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.redisson:redisson-spring-boot-starter:3.26.0'
    
    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    
    // Guava
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // Runtime
    runtimeOnly 'com.mysql:mysql-connector-j:8.2.0'

    // Jakarta Servlet
    implementation 'jakarta.servlet:jakarta.servlet-api'

    // Rate Limiting
    implementation 'com.bucket4j:bucket4j-core:8.7.0'
    implementation 'com.bucket4j:bucket4j-redis:8.7.0'

    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.assertj:assertj-core'
}

def generated = 'src/main/generated'

sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml {
            required = true
        }
        html {
            required = true
        }
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "**/config/**",
                "**/*Application.class"
            ])
        }))
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
            excludes = [
                '**/config/**',
                '**/*Application.class'
            ]
        }
    }
}