version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: redis_hanghae
    restart: always
    environment:
      MYSQL_DATABASE: redis_hanghae
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:



#version: Docker Compose 파일의 버전입니다. 일반적으로 최신 버전을 사용하는 것이 좋습니다.
#services: 애플리케이션을 구성하는 서비스들을 정의합니다. 여기서는 db 서비스가 데이터베이스 역할을 합니다.
#image: 사용할 도커 이미지를 지정합니다. mysql:8.0은 MySQL 8.0 버전을 사용한다는 의미입니다.
#container_name: 컨테이너의 이름을 지정합니다. 원하는 이름으로 변경 가능합니다.
#restart: 컨테이너가 중지되었을 때 자동으로 재시작할지 여부를 설정합니다. always는 항상 재시작합니다.
#environment: 환경 변수를 설정합니다.
#MYSQL_DATABASE: 생성할 기본 데이터베이스 이름
#MYSQL_USER: 생성할 사용자 이름
#MYSQL_PASSWORD: 사용자의 비밀번호
#MYSQL_ROOT_PASSWORD: 루트 사용자의 비밀번호
#ports: 호스트와 컨테이너 간의 포트를 매핑합니다. "3306:3306"은 호스트의 3306 포트를 컨테이너의 3306 포트에 매핑합니다.
#volumes: 데이터의 지속성을 위해 볼륨을 마운트합니다. db_data 볼륨을 /var/lib/mysql에 마운트하여 데이터베이스 파일을 호스트에 저장합니다.
#volumes: 프로젝트 내에서 사용할 볼륨을 정의합니다. db_data는 데이터베이스 데이터를 저장할 볼륨입니다.


#Docker Compose 실행
#  프로젝트 루트 디렉토리에서 다음 명령어를 실행하여 Docker Compose를 통해 데이터베이스 컨테이너를 실행합니다.

