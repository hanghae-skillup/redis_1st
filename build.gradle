plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

bootJar.enabled = false // 루트 모듈의 .jar 생성 X

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

subprojects { // 모든 하위 모듈들에 적용
	group 'com.example'
	version '0.0.1-SNAPSHOT'
	sourceCompatibility = '17'

	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco' // Jacoco 플러그인 추가

	jacoco {
		// JaCoCo 버전
		toolVersion = '0.8.8'
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies { // 모든 하위 모듈에 추가
		implementation 'org.springframework.boot:spring-boot-starter'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		implementation 'mysql:mysql-connector-java:8.0.33'
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor "org.projectlombok:lombok"
	}

	tasks.named('test') {
		useJUnitPlatform()
		finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
	}

	def excludedPackages = [
			'**/dto/**',  // dto 패키지 제외
			'**/config/**',  // config 패키지 제외
			'**/exception/**',  // exception 패키지 제외
			'**/domain/**',  // domain 패키지 제외
			'**/aop/**',  // aop 패키지 제외
			'**/*Application*',  // Application 클래스 제외
			'**/Q*' // QueryDSL 자동 생성 클래스 제외
	]

	def Qdomains = ('A'..'Z').collect { "**/Q${it}*" }
	def allExcludes = excludedPackages + Qdomains

	// jacoco report 설정
	jacocoTestReport {
		reports {
			html.required = true
			xml.required = true
			csv.required = false
			html.outputLocation = layout.buildDirectory.dir("reports/jacoco/test/html")
		}

		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: allExcludes)
			}))
		}

		// jacocoTestReport가 끝나면 jacocoTestCoverageVerification 동작
		dependsOn test
		finalizedBy 'jacocoTestCoverageVerification'
	}

    // jacoco 커버리지 검증 설정
	jacocoTestCoverageVerification {
		violationRules {
			rule {
				enabled = true // 커버리지 적용 여부
				element = 'CLASS' // 커버리지 적용 단위

				// 라인 커버리지 설정
				// 적용 대상 전체 소스 코드들을 한줄 한줄 따졌을 때 테스트 코드가 작성되어 있는 줄의 빈도
				// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
				limit {
					counter = 'INSTRUCTION'
					value = 'COVEREDRATIO'
					minimum = 0.30
				}

				// 브랜치 커버리지 설정
				// if-else 등을 활용하여 발생되는 분기들 중 테스트 코드가 작성되어 있는 빈도
				// 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
				limit {
					counter = 'BRANCH'
					value = 'COVEREDRATIO'
					minimum = 0.30
				}

				excludes = allExcludes
			}
		}

		afterEvaluate {
			// 제외 규칙을 classDirectories에 적용
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: allExcludes)
			}))
		}
	}
}